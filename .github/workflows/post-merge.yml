---
# yamllint disable rule:line-length

name: Post merge CI

on:
  pull_request:
    types:
      - closed

jobs:
  git-release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    name: Post merge action
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Git config
        run: |
          git config --local --add safe.directory $GITHUB_WORKSPACE

      - name: Create latest tag
        id: create_tag
        run: |
          git fetch --unshallow --tags
          VERSION=$(cat VERSION)
          LATEST_TAG=$(cat VERSION | tr -d 'v.')
          CURRENT_TAG=$(git tag --list| tail -n1| tr -d 'v.')
          if [[ $LATEST_TAG -gt $CURRENT_TAG ]]
          then
            git tag $VERSION
            git push --tags
            echo "tag_version=$VERSION" >> $GITHUB_OUTPUT
            echo "release=true" >> $GITHUB_OUTPUT
          fi

      - name: Fetch git commit info
        if: ${{ steps.create_tag.outputs.release == 'true' }}
        id: git_info
        run: |
          GIT_SUBJECT=$(git log -1 --pretty=format:"%s")
          GIT_BODY=$(git log -1 --format=%b HEAD | grep "\S")
          echo "git_subject=$GIT_SUBJECT" >> $GITHUB_OUTPUT
          # This hack is required to add a multiline output to GITHUB_OUTPUT
          echo "git_body<<EOF" >> $GITHUB_OUTPUT
          echo $GIT_BODY >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        if: ${{ steps.create_tag.outputs.release == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.tag_version }}
          release_name: "${{ steps.create_tag.outputs.tag_version }}: ${{ steps.git_info.outputs.git_subject }}"
          body: ${{ steps.git_info.outputs.git_body }}

  terraform-doc:
    if: success()
    needs: git-release
    steps:
      - name: Render terraform docs inside the README.md and push changes back to PR branch
        uses: lab-se/terraform-docs-action@v1.3
        with:
          working-dir: .
          config-file: .terraform-docs.yml

      - name: README - Parse and modify version [latest tag]
        id: latest_tag
        run: |
          latest_tag=$(cat VERSION)
          sed -i "s/\$VERSION/$latest_tag/g" README.md
          echo "release_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: README - Parse and modify source module path
        run: |
          sed -i "s#<RELEASE_VERSION>#${{ steps.latest_tag.outputs.release_tag }}#g" README.md

      # - name: Setup Git config
      #   run: |
      #     git config --local --add safe.directory $GITHUB_WORKSPACE
      #     sudo chown -R runner:docker .git/

      - name: Check diff (fix bug if nothing to commit)
        id: check_diff
        run: |
          git add README.md --verbose
          if [ $(git status | grep "nothing to commit" >/dev/null ; echo $?) -eq 1 ];
          then
            echo "diff=true" >> $GITHUB_OUTPUT
          else
            echo "nothing to commit"
            echo "diff=false" >> $GITHUB_OUTPUT
          fi

      - name: Push to repository
        if: ${{ steps.check_diff.outputs.diff == 'true' }}
        run: |
          git config user.name "gihub_workflow"
          git config user.email "github_workflow@users.noreply.github.com"
          git commit -m "Automatic readme update"
          git push

  terraform-deploy-dev:
    if: success()
    needs: git-release
    env:
      TFVARS_PATH: vars
      ENVIRONMENT: dev
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform init
        run: terraform init -backend-config=${TFVARS_PATH}/${ENVIRONMENT}/backend.tfvars -upgrade=true

      - name: Terraform apply
        id: plan
        run: |
          terraform apply -var-file=${TFVARS_PATH}/${ENVIRONMENT}/input.tfvars -lock-timeout=15m -auto-approve
