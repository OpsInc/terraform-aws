---
# yamllint disable rule:line-length

stages:
  - init
  - build

include:
  - project: 'nodeai/pipeline-templates'
    ref: main
    file:
      - 'git/actions.yml'

git_actions_gating:
  stage: init
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'  # only when merged to main

git_actions_tag:
  stage: build
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'  # only when merged to main

# before_script:
#   - export AWS_ACCESS_KEY_ID=$ACCESS_KEY_ID
#   - export AWS_SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY
#   - export AWS_DEFAULT_REGION=$(grep AWS_REGION $TERRAFORM_DIR/env/$ENVIRONMENT/vars.tfvars | cut -d'"' -f2)
#   - terraform -chdir=$TERRAFORM_DIR init -backend-config=env/$ENVIRONMENT/backend.tfbackend -upgrade=true

# lint_code:
#   stage: dev
#   image: registry.gitlab.com/nodeai/image-builder/terraform-pipeline-worker:latest
#   variables:
#     ENVIRONMENT: 'dev'
#     TERRAFORM_DIR: 'eks_cluster'
#   script:
#     - terraform init -backend=false
#     - terraform -chdir=$TERRAFORM_DIR validate
#   only:
#     refs:
#       - /^feature/

# deploy_eks_dev:
#   stage: dev
#   image: registry.gitlab.com/nodeai/image-builder/terraform-pipeline-worker:latest
#   variables:
#     ENVIRONMENT: 'dev'
#     TERRAFORM_DIR: 'eks_cluster'
#   script:
#     - terraform -chdir=$TERRAFORM_DIR apply -var-file=env/$ENVIRONMENT/vars.tfvars -auto-approve
#     - aws eks update-kubeconfig --name $(terraform -chdir=$TERRAFORM_DIR state show module.eks.aws_eks_cluster.create_cluster | grep name | cut -d '"' -f2)
#     - kubectl apply -f $TERRAFORM_DIR/env/$ENVIRONMENT/test/ingress.yaml
#     - kubectl wait --for=condition=available deployment.apps/app1-web
#     # - terraform -chdir=$TERRAFORM_DIR destroy -var-file=env/$ENVIRONMENT/vars.tfvars -auto-approve
#   only:
#     refs:
#       - master
#       # - /^feature/

# cleanup_deploy_eks_dev:
#   needs: [deploy_eks_dev]
#   stage: cleanup_stage
#   image: registry.gitlab.com/nodeai/image-builder/terraform-pipeline-worker:latest
#   variables:
#     ENVIRONMENT: 'dev'
#     TERRAFORM_DIR: 'eks_cluster'
#   script:
#     - terraform -chdir=$TERRAFORM_DIR destroy -var-file=env/$ENVIRONMENT/vars.tfvars -auto-approve
#   only:
#     refs:
#       - master
#   when: on_failure
